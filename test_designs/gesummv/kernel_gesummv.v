// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_gesummv_kernel_gesummv,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.222700,HLS_SYN_LAT=482,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4827,HLS_SYN_LUT=5045,HLS_VERSION=2023_1_1}" *)

module kernel_gesummv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        alpha,
        beta,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        tmp_address0,
        tmp_ce0,
        tmp_we0,
        tmp_d0,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1,
        y_address0,
        y_ce0,
        y_we0,
        y_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] alpha;
input  [31:0] beta;
output  [9:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [9:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [9:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [9:0] B_address1;
output   B_ce1;
input  [31:0] B_q1;
output  [4:0] tmp_address0;
output   tmp_ce0;
output   tmp_we0;
output  [31:0] tmp_d0;
output  [4:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [4:0] x_address1;
output   x_ce1;
input  [31:0] x_q1;
output  [4:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] x_address0;
reg x_ce0;
reg[4:0] x_address1;
reg x_ce1;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] x_load_reg_445;
wire    ap_CS_fsm_state2;
reg   [31:0] x_load_1_reg_450;
reg   [31:0] x_load_2_reg_465;
wire    ap_CS_fsm_state3;
reg   [31:0] x_load_3_reg_470;
reg   [31:0] x_load_4_reg_485;
wire    ap_CS_fsm_state4;
reg   [31:0] x_load_5_reg_490;
reg   [31:0] x_load_6_reg_505;
wire    ap_CS_fsm_state5;
reg   [31:0] x_load_7_reg_510;
reg   [31:0] x_load_8_reg_525;
wire    ap_CS_fsm_state6;
reg   [31:0] x_load_9_reg_530;
reg   [31:0] x_load_10_reg_545;
wire    ap_CS_fsm_state7;
reg   [31:0] x_load_11_reg_550;
reg   [31:0] x_load_12_reg_565;
wire    ap_CS_fsm_state8;
reg   [31:0] x_load_13_reg_570;
reg   [31:0] x_load_14_reg_585;
wire    ap_CS_fsm_state9;
reg   [31:0] x_load_15_reg_590;
reg   [31:0] x_load_16_reg_605;
wire    ap_CS_fsm_state10;
reg   [31:0] x_load_17_reg_610;
reg   [31:0] x_load_18_reg_625;
wire    ap_CS_fsm_state11;
reg   [31:0] x_load_19_reg_630;
reg   [31:0] x_load_20_reg_645;
wire    ap_CS_fsm_state12;
reg   [31:0] x_load_21_reg_650;
reg   [31:0] x_load_22_reg_665;
wire    ap_CS_fsm_state13;
reg   [31:0] x_load_23_reg_670;
reg   [31:0] x_load_24_reg_685;
wire    ap_CS_fsm_state14;
reg   [31:0] x_load_25_reg_690;
reg   [31:0] x_load_26_reg_705;
wire    ap_CS_fsm_state15;
reg   [31:0] x_load_27_reg_710;
wire    ap_CS_fsm_state16;
reg   [31:0] x_load_28_reg_735;
reg   [31:0] x_load_29_reg_740;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_done;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_idle;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_ready;
wire   [9:0] grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_address0;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_ce0;
wire   [9:0] grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_address1;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_ce1;
wire   [9:0] grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_address0;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_ce0;
wire   [9:0] grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_address1;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_ce1;
wire   [4:0] grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_address0;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_ce0;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_we0;
wire   [31:0] grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_d0;
wire   [4:0] grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_address0;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_ce0;
wire    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_we0;
wire   [31:0] grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_d0;
reg    grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start_reg;
wire    ap_CS_fsm_state17;
reg   [16:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start_reg = 1'b0;
end

kernel_gesummv_kernel_gesummv_Pipeline_VITIS_LOOP_23_1 grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start),
    .ap_done(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_done),
    .ap_idle(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_idle),
    .ap_ready(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_ready),
    .A_address0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_address0),
    .A_ce0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_ce0),
    .A_q0(A_q0),
    .A_address1(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_address1),
    .A_ce1(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_ce1),
    .A_q1(A_q1),
    .B_address0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_address0),
    .B_ce0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_ce0),
    .B_q0(B_q0),
    .B_address1(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_address1),
    .B_ce1(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_ce1),
    .B_q1(B_q1),
    .tmp_address0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_address0),
    .tmp_ce0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_ce0),
    .tmp_we0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_we0),
    .tmp_d0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_d0),
    .y_address0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_address0),
    .y_ce0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_ce0),
    .y_we0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_we0),
    .y_d0(grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_d0),
    .sext_ln29_1(x_load_reg_445),
    .sext_ln29_2(x_load_1_reg_450),
    .sext_ln29_3(x_load_2_reg_465),
    .sext_ln29_4(x_load_3_reg_470),
    .sext_ln29_5(x_load_4_reg_485),
    .sext_ln29_6(x_load_5_reg_490),
    .sext_ln29_7(x_load_6_reg_505),
    .sext_ln29_8(x_load_7_reg_510),
    .sext_ln29_9(x_load_8_reg_525),
    .sext_ln29_10(x_load_9_reg_530),
    .sext_ln29_11(x_load_10_reg_545),
    .sext_ln29_12(x_load_11_reg_550),
    .sext_ln29_13(x_load_12_reg_565),
    .sext_ln29_14(x_load_13_reg_570),
    .sext_ln29_15(x_load_14_reg_585),
    .sext_ln29_16(x_load_15_reg_590),
    .sext_ln29_17(x_load_16_reg_605),
    .sext_ln29_18(x_load_17_reg_610),
    .sext_ln29_19(x_load_18_reg_625),
    .sext_ln29_20(x_load_19_reg_630),
    .sext_ln29_21(x_load_20_reg_645),
    .sext_ln29_22(x_load_21_reg_650),
    .sext_ln29_23(x_load_22_reg_665),
    .sext_ln29_24(x_load_23_reg_670),
    .sext_ln29_25(x_load_24_reg_685),
    .sext_ln29_26(x_load_25_reg_690),
    .sext_ln29_27(x_load_26_reg_705),
    .sext_ln29_28(x_load_27_reg_710),
    .sext_ln29_29(x_load_28_reg_735),
    .sext_ln23(x_load_29_reg_740),
    .alpha_cast(alpha),
    .sext_ln29(beta)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start_reg <= 1'b1;
        end else if ((grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_ready == 1'b1)) begin
            grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_load_10_reg_545 <= x_q1;
        x_load_11_reg_550 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_load_12_reg_565 <= x_q1;
        x_load_13_reg_570 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        x_load_14_reg_585 <= x_q1;
        x_load_15_reg_590 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        x_load_16_reg_605 <= x_q1;
        x_load_17_reg_610 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_load_18_reg_625 <= x_q1;
        x_load_19_reg_630 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_load_1_reg_450 <= x_q0;
        x_load_reg_445 <= x_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        x_load_20_reg_645 <= x_q1;
        x_load_21_reg_650 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        x_load_22_reg_665 <= x_q1;
        x_load_23_reg_670 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_load_24_reg_685 <= x_q1;
        x_load_25_reg_690 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        x_load_26_reg_705 <= x_q1;
        x_load_27_reg_710 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        x_load_28_reg_735 <= x_q1;
        x_load_29_reg_740 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_load_2_reg_465 <= x_q1;
        x_load_3_reg_470 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_load_4_reg_485 <= x_q1;
        x_load_5_reg_490 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_load_6_reg_505 <= x_q1;
        x_load_7_reg_510 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_load_8_reg_525 <= x_q1;
        x_load_9_reg_530 <= x_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        x_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        x_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        x_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        x_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        x_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address0 = 64'd1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        x_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        x_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        x_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        x_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        x_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address1 = 64'd0;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_address0;

assign A_address1 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_address1;

assign A_ce0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_ce0;

assign A_ce1 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_A_ce1;

assign B_address0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_address0;

assign B_address1 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_address1;

assign B_ce0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_ce0;

assign B_ce1 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_B_ce1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_ap_start_reg;

assign tmp_address0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_address0;

assign tmp_ce0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_ce0;

assign tmp_d0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_d0;

assign tmp_we0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_tmp_we0;

assign y_address0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_address0;

assign y_ce0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_ce0;

assign y_d0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_d0;

assign y_we0 = grp_kernel_gesummv_Pipeline_VITIS_LOOP_23_1_fu_387_y_we0;

endmodule //kernel_gesummv
