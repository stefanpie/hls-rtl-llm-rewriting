// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_jacobi_1d_kernel_jacobi_1d,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.960760,HLS_SYN_LAT=565,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4286,HLS_SYN_LUT=5792,HLS_VERSION=2023_1_1}" *)

module kernel_jacobi_1d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_q0,
        B_address1,
        B_ce1,
        B_we1,
        B_d1,
        B_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [4:0] A_address1;
output   A_ce1;
output   A_we1;
output  [31:0] A_d1;
input  [31:0] A_q1;
output  [4:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
input  [31:0] B_q0;
output  [4:0] B_address1;
output   B_ce1;
output   B_we1;
output  [31:0] B_d1;
input  [31:0] B_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] A_address0;
reg A_ce0;
reg A_we0;
reg[4:0] A_address1;
reg A_ce1;
reg A_we1;
reg[4:0] B_address0;
reg B_ce0;
reg B_we0;
reg[4:0] B_address1;
reg B_ce1;
reg B_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] A_load_reg_112;
wire    ap_CS_fsm_state2;
reg   [31:0] A_load_28_reg_117;
reg   [31:0] B_load_reg_122;
reg   [31:0] B_load_1_reg_127;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_done;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_idle;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_ready;
wire   [4:0] grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_address0;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_ce0;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_we0;
wire   [31:0] grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_d0;
wire   [4:0] grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_address1;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_ce1;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_we1;
wire   [31:0] grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_d1;
wire   [4:0] grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_address0;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_ce0;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_we0;
wire   [31:0] grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_d0;
wire   [4:0] grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_address1;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_ce1;
wire    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_we1;
wire   [31:0] grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_d1;
reg    grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start_reg = 1'b0;
end

kernel_jacobi_1d_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1 grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start),
    .ap_done(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_done),
    .ap_idle(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_idle),
    .ap_ready(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_ready),
    .B_address0(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_address0),
    .B_ce0(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_ce0),
    .B_we0(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_we0),
    .B_d0(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_d0),
    .B_address1(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_address1),
    .B_ce1(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_ce1),
    .B_we1(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_we1),
    .B_d1(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_d1),
    .A_address0(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_address0),
    .A_ce0(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_ce0),
    .A_we0(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_we0),
    .A_d0(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_d0),
    .A_q0(A_q0),
    .A_address1(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_address1),
    .A_ce1(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_ce1),
    .A_we1(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_we1),
    .A_d1(grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_d1),
    .A_q1(A_q1),
    .sext_ln23(A_load_reg_112),
    .sext_ln23_4(A_load_28_reg_117),
    .sext_ln25(B_load_reg_122),
    .sext_ln25_4(B_load_1_reg_127)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_ready == 1'b1)) begin
            grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_load_28_reg_117 <= A_q0;
        A_load_reg_112 <= A_q1;
        B_load_1_reg_127 <= B_q0;
        B_load_reg_122 <= B_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_address0;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address1 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_address1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        A_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_ce0 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_ce0;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        A_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_ce1 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_ce1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_we0 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_we0;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_we1 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_we1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        B_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_address0;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        B_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address1 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_address1;
    end else begin
        B_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        B_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_ce0 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_ce0;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        B_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_ce1 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_ce1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_we0 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_we0;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_we1 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_we1;
    end else begin
        B_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_d0;

assign A_d1 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_A_d1;

assign B_d0 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_d0;

assign B_d1 = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_B_d1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start = grp_kernel_jacobi_1d_Pipeline_VITIS_LOOP_20_1_fu_80_ap_start_reg;

endmodule //kernel_jacobi_1d
