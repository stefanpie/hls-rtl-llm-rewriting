// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_jacobi_2d_kernel_jacobi_2d_Pipeline_VITIS_LOOP_22_2_VITIS_LOOP_23_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        grp_fu_95_p_din0,
        grp_fu_95_p_din1,
        grp_fu_95_p_dout0,
        grp_fu_95_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [9:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [9:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
output  [34:0] grp_fu_95_p_din0;
output  [14:0] grp_fu_95_p_din1;
input  [47:0] grp_fu_95_p_dout0;
output   grp_fu_95_p_ce;

reg ap_idle;
reg[9:0] A_address0;
reg A_ce0;
reg[9:0] A_address1;
reg A_ce1;
reg B_ce0;
reg B_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln22_reg_475;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] icmp_ln22_fu_159_p2;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln22_reg_475_pp0_iter1_reg;
reg   [4:0] i_load_reg_479;
wire   [0:0] icmp_ln23_fu_177_p2;
reg   [0:0] icmp_ln23_reg_486;
wire   [4:0] select_ln22_fu_183_p3;
reg   [4:0] select_ln22_reg_492;
wire   [4:0] indvars_iv_next61412_fu_191_p2;
reg   [4:0] indvars_iv_next61412_reg_499;
wire   [4:0] select_ln22_1_fu_197_p3;
reg   [4:0] select_ln22_1_reg_504;
wire   [9:0] sub_ln24_fu_233_p2;
reg   [9:0] sub_ln24_reg_510;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln24_4_fu_322_p1;
reg   [63:0] zext_ln24_4_reg_515;
reg   [63:0] zext_ln24_4_reg_515_pp0_iter1_reg;
wire   [9:0] add_ln24_7_fu_327_p2;
reg   [9:0] add_ln24_7_reg_525;
wire   [9:0] add_ln24_8_fu_333_p2;
reg   [9:0] add_ln24_8_reg_530;
wire    ap_block_pp0_stage2_11001;
wire   [32:0] add_ln24_1_fu_371_p2;
reg   [32:0] add_ln24_1_reg_545;
reg   [31:0] A_load_2_reg_560;
reg   [31:0] A_load_3_reg_565;
wire   [34:0] add_ln24_5_fu_434_p2;
reg   [34:0] add_ln24_5_reg_570;
wire  signed [47:0] sext_ln24_7_fu_440_p1;
reg   [31:0] trunc_ln_reg_580;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln24_8_fu_354_p1;
wire   [63:0] zext_ln24_5_fu_359_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln24_10_fu_391_p1;
wire   [63:0] zext_ln24_6_fu_401_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] j_fu_62;
wire   [4:0] add_ln24_2_fu_377_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_66;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] add_ln22_fu_165_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [5:0] tmp_1_fu_222_p3;
wire   [9:0] tmp_fu_215_p3;
wire   [9:0] zext_ln24_fu_229_p1;
wire   [4:0] indvars_iv_next614_mid1_fu_239_p2;
wire   [4:0] select_ln22_2_fu_244_p3;
wire   [5:0] tmp_3_fu_258_p3;
wire   [9:0] tmp_2_fu_250_p3;
wire   [9:0] zext_ln24_1_fu_266_p1;
wire   [4:0] empty_fu_276_p2;
wire   [4:0] select_ln22_3_fu_281_p3;
wire   [5:0] tmp_5_fu_295_p3;
wire   [9:0] tmp_4_fu_287_p3;
wire   [9:0] zext_ln24_2_fu_303_p1;
wire   [9:0] zext_ln24_3_fu_313_p1;
wire   [9:0] add_ln24_6_fu_316_p2;
wire   [9:0] sub_ln24_1_fu_270_p2;
wire   [9:0] sub_ln24_2_fu_307_p2;
wire   [4:0] add_ln24_fu_339_p2;
wire   [9:0] zext_ln24_7_fu_344_p1;
wire   [9:0] add_ln24_9_fu_348_p2;
wire  signed [32:0] sext_ln24_1_fu_367_p1;
wire  signed [32:0] sext_ln24_fu_363_p1;
wire   [9:0] zext_ln24_9_fu_382_p1;
wire   [9:0] add_ln24_10_fu_386_p2;
wire  signed [33:0] sext_ln24_2_fu_405_p1;
wire  signed [33:0] sext_ln24_3_fu_408_p1;
wire   [33:0] add_ln24_3_fu_411_p2;
wire  signed [33:0] sext_ln24_4_fu_417_p1;
wire   [33:0] add_ln24_4_fu_420_p2;
wire  signed [34:0] sext_ln24_5_fu_426_p1;
wire  signed [34:0] sext_ln24_6_fu_430_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage1;
reg    ap_idle_pp0_0to0;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_jacobi_2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln22_1_fu_197_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 5'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_70 <= add_ln22_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        j_fu_62 <= 5'd1;
    end else if (((icmp_ln22_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        j_fu_62 <= add_ln24_2_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_load_2_reg_560 <= A_q0;
        A_load_3_reg_565 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln24_1_reg_545 <= add_ln24_1_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln24_5_reg_570 <= add_ln24_5_fu_434_p2;
        zext_ln24_4_reg_515_pp0_iter1_reg[9 : 0] <= zext_ln24_4_reg_515[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln24_7_reg_525 <= add_ln24_7_fu_327_p2;
        add_ln24_8_reg_530 <= add_ln24_8_fu_333_p2;
        sub_ln24_reg_510[9 : 1] <= sub_ln24_fu_233_p2[9 : 1];
        zext_ln24_4_reg_515[9 : 0] <= zext_ln24_4_fu_322_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_159_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_load_reg_479 <= ap_sig_allocacmp_i_load;
        icmp_ln23_reg_486 <= icmp_ln23_fu_177_p2;
        indvars_iv_next61412_reg_499 <= indvars_iv_next61412_fu_191_p2;
        select_ln22_1_reg_504 <= select_ln22_1_fu_197_p3;
        select_ln22_reg_492 <= select_ln22_fu_183_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln22_reg_475 <= icmp_ln22_fu_159_p2;
        icmp_ln22_reg_475_pp0_iter1_reg <= icmp_ln22_reg_475;
        trunc_ln_reg_580 <= {{grp_fu_95_p_dout0[47:16]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = zext_ln24_6_fu_401_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_address0 = zext_ln24_10_fu_391_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address0 = zext_ln24_8_fu_354_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            A_address1 = zext_ln24_5_fu_359_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            A_address1 = zext_ln24_4_fu_322_p1;
        end else begin
            A_address1 = 'bx;
        end
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_475 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_475_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 5'd1;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 5'd1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_62;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address0 = zext_ln24_4_reg_515_pp0_iter1_reg;

assign B_d0 = trunc_ln_reg_580;

assign add_ln22_fu_165_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln24_10_fu_386_p2 = (sub_ln24_reg_510 + zext_ln24_9_fu_382_p1);

assign add_ln24_1_fu_371_p2 = ($signed(sext_ln24_1_fu_367_p1) + $signed(sext_ln24_fu_363_p1));

assign add_ln24_2_fu_377_p2 = (select_ln22_reg_492 + 5'd1);

assign add_ln24_3_fu_411_p2 = ($signed(sext_ln24_2_fu_405_p1) + $signed(sext_ln24_3_fu_408_p1));

assign add_ln24_4_fu_420_p2 = ($signed(add_ln24_3_fu_411_p2) + $signed(sext_ln24_4_fu_417_p1));

assign add_ln24_5_fu_434_p2 = ($signed(sext_ln24_5_fu_426_p1) + $signed(sext_ln24_6_fu_430_p1));

assign add_ln24_6_fu_316_p2 = (sub_ln24_fu_233_p2 + zext_ln24_3_fu_313_p1);

assign add_ln24_7_fu_327_p2 = (sub_ln24_1_fu_270_p2 + zext_ln24_3_fu_313_p1);

assign add_ln24_8_fu_333_p2 = (sub_ln24_2_fu_307_p2 + zext_ln24_3_fu_313_p1);

assign add_ln24_9_fu_348_p2 = (sub_ln24_fu_233_p2 + zext_ln24_7_fu_344_p1);

assign add_ln24_fu_339_p2 = ($signed(select_ln22_reg_492) + $signed(5'd31));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign empty_fu_276_p2 = ($signed(i_load_reg_479) + $signed(5'd31));

assign grp_fu_95_p_ce = 1'b1;

assign grp_fu_95_p_din0 = sext_ln24_7_fu_440_p1;

assign grp_fu_95_p_din1 = 48'd13107;

assign icmp_ln22_fu_159_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_177_p2 = ((ap_sig_allocacmp_j_load == 5'd29) ? 1'b1 : 1'b0);

assign indvars_iv_next61412_fu_191_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign indvars_iv_next614_mid1_fu_239_p2 = (i_load_reg_479 + 5'd2);

assign select_ln22_1_fu_197_p3 = ((icmp_ln23_fu_177_p2[0:0] == 1'b1) ? indvars_iv_next61412_fu_191_p2 : ap_sig_allocacmp_i_load);

assign select_ln22_2_fu_244_p3 = ((icmp_ln23_reg_486[0:0] == 1'b1) ? indvars_iv_next614_mid1_fu_239_p2 : indvars_iv_next61412_reg_499);

assign select_ln22_3_fu_281_p3 = ((icmp_ln23_reg_486[0:0] == 1'b1) ? i_load_reg_479 : empty_fu_276_p2);

assign select_ln22_fu_183_p3 = ((icmp_ln23_fu_177_p2[0:0] == 1'b1) ? 5'd1 : ap_sig_allocacmp_j_load);

assign sext_ln24_1_fu_367_p1 = $signed(A_q0);

assign sext_ln24_2_fu_405_p1 = $signed(add_ln24_1_reg_545);

assign sext_ln24_3_fu_408_p1 = $signed(A_load_2_reg_560);

assign sext_ln24_4_fu_417_p1 = $signed(A_load_3_reg_565);

assign sext_ln24_5_fu_426_p1 = $signed(add_ln24_4_fu_420_p2);

assign sext_ln24_6_fu_430_p1 = $signed(A_q0);

assign sext_ln24_7_fu_440_p1 = $signed(add_ln24_5_reg_570);

assign sext_ln24_fu_363_p1 = $signed(A_q1);

assign sub_ln24_1_fu_270_p2 = (tmp_2_fu_250_p3 - zext_ln24_1_fu_266_p1);

assign sub_ln24_2_fu_307_p2 = (tmp_4_fu_287_p3 - zext_ln24_2_fu_303_p1);

assign sub_ln24_fu_233_p2 = (tmp_fu_215_p3 - zext_ln24_fu_229_p1);

assign tmp_1_fu_222_p3 = {{select_ln22_1_reg_504}, {1'd0}};

assign tmp_2_fu_250_p3 = {{select_ln22_2_fu_244_p3}, {5'd0}};

assign tmp_3_fu_258_p3 = {{select_ln22_2_fu_244_p3}, {1'd0}};

assign tmp_4_fu_287_p3 = {{select_ln22_3_fu_281_p3}, {5'd0}};

assign tmp_5_fu_295_p3 = {{select_ln22_3_fu_281_p3}, {1'd0}};

assign tmp_fu_215_p3 = {{select_ln22_1_reg_504}, {5'd0}};

assign zext_ln24_10_fu_391_p1 = add_ln24_10_fu_386_p2;

assign zext_ln24_1_fu_266_p1 = tmp_3_fu_258_p3;

assign zext_ln24_2_fu_303_p1 = tmp_5_fu_295_p3;

assign zext_ln24_3_fu_313_p1 = select_ln22_reg_492;

assign zext_ln24_4_fu_322_p1 = add_ln24_6_fu_316_p2;

assign zext_ln24_5_fu_359_p1 = add_ln24_7_reg_525;

assign zext_ln24_6_fu_401_p1 = add_ln24_8_reg_530;

assign zext_ln24_7_fu_344_p1 = add_ln24_fu_339_p2;

assign zext_ln24_8_fu_354_p1 = add_ln24_9_fu_348_p2;

assign zext_ln24_9_fu_382_p1 = add_ln24_2_fu_377_p2;

assign zext_ln24_fu_229_p1 = tmp_1_fu_222_p3;

always @ (posedge ap_clk) begin
    sub_ln24_reg_510[0] <= 1'b0;
    zext_ln24_4_reg_515[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln24_4_reg_515_pp0_iter1_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //kernel_jacobi_2d_kernel_jacobi_2d_Pipeline_VITIS_LOOP_22_2_VITIS_LOOP_23_3
