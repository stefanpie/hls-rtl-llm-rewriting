// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_lu_kernel_lu_Pipeline_VITIS_LOOP_24_4_VITIS_LOOP_25_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln15,
        mul_ln24,
        j_3,
        add_ln20,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        grp_fu_379_p_din0,
        grp_fu_379_p_din1,
        grp_fu_379_p_dout0,
        grp_fu_379_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln15;
input  [10:0] mul_ln24;
input  [5:0] j_3;
input  [10:0] add_ln20;
output  [10:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [10:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [31:0] grp_fu_379_p_din0;
output  [31:0] grp_fu_379_p_din1;
input  [47:0] grp_fu_379_p_dout0;
output   grp_fu_379_p_ce;

reg ap_idle;
reg[10:0] A_address0;
reg A_ce0;
reg A_we0;
reg[10:0] A_address1;
reg A_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln24_reg_413;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln24_fu_187_p2;
reg   [0:0] icmp_ln24_reg_413_pp0_iter1_reg;
wire   [5:0] select_ln24_fu_217_p3;
reg   [5:0] select_ln24_reg_417;
wire   [6:0] select_ln24_1_fu_225_p3;
reg   [6:0] select_ln24_1_reg_425;
wire   [10:0] add_ln26_fu_246_p2;
reg   [10:0] add_ln26_reg_430;
wire    ap_block_pp0_stage1_11001;
reg   [10:0] add_ln26_reg_430_pp0_iter1_reg;
reg   [31:0] A_load_reg_445;
reg   [31:0] A_load_1_reg_450;
wire  signed [47:0] sext_ln26_fu_309_p1;
wire  signed [47:0] sext_ln26_1_fu_313_p1;
reg   [10:0] A_addr_reg_465;
reg   [47:0] mul_ln26_reg_471;
wire   [0:0] addr_cmp_fu_324_p2;
reg   [0:0] addr_cmp_reg_476;
reg   [31:0] trunc_ln_reg_481;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln26_3_fu_259_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln26_5_fu_294_p1;
wire   [63:0] zext_ln26_1_fu_317_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] reuse_addr_reg_fu_74;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_78;
reg   [5:0] k_fu_82;
wire   [5:0] add_ln25_fu_299_p2;
reg   [5:0] ap_sig_allocacmp_k_load;
reg   [6:0] j_fu_86;
wire   [6:0] zext_ln15_cast_fu_155_p1;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [10:0] indvar_flatten_fu_90;
wire   [10:0] add_ln24_1_fu_193_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln25_fu_211_p2;
wire   [6:0] add_ln24_fu_205_p2;
wire   [10:0] zext_ln26_fu_243_p1;
wire   [10:0] zext_ln26_2_fu_251_p1;
wire   [10:0] add_ln26_1_fu_254_p2;
wire   [8:0] tmp_3_fu_271_p3;
wire   [10:0] tmp_2_fu_264_p3;
wire   [10:0] zext_ln26_4_fu_278_p1;
wire   [10:0] add_ln26_2_fu_282_p2;
wire   [10:0] add_ln26_3_fu_288_p2;
wire   [31:0] reuse_select_fu_338_p3;
wire   [47:0] shl_ln_fu_345_p3;
wire   [47:0] sub_ln26_fu_353_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_lu_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln24_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_90 <= add_ln24_1_fu_193_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_90 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln24_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_86 <= select_ln24_1_fu_225_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_86 <= zext_ln15_cast_fu_155_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        k_fu_82 <= 6'd0;
    end else if (((icmp_ln24_reg_413 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        k_fu_82 <= add_ln25_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_74 <= 64'd18446744073709551615;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_addr_reg_fu_74 <= zext_ln26_1_fu_317_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_reg_fu_78 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            reuse_reg_fu_78 <= trunc_ln_reg_481;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_addr_reg_465 <= zext_ln26_1_fu_317_p1;
        addr_cmp_reg_476 <= addr_cmp_fu_324_p2;
        icmp_ln24_reg_413 <= icmp_ln24_fu_187_p2;
        icmp_ln24_reg_413_pp0_iter1_reg <= icmp_ln24_reg_413;
        mul_ln26_reg_471 <= grp_fu_379_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_load_1_reg_450 <= A_q0;
        A_load_reg_445 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_413 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln26_reg_430 <= add_ln26_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln26_reg_430_pp0_iter1_reg <= add_ln26_reg_430;
        trunc_ln_reg_481 <= {{sub_ln26_fu_353_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_187_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln24_1_reg_425 <= select_ln24_1_fu_225_p3;
        select_ln24_reg_417 <= select_ln24_fu_217_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = A_addr_reg_465;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address0 = zext_ln26_5_fu_294_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address1 = zext_ln26_1_fu_317_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address1 = zext_ln26_3_fu_259_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_413 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_413_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = zext_ln15_cast_fu_155_p1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_load = 6'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_82;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = trunc_ln_reg_481;

assign add_ln24_1_fu_193_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln24_fu_205_p2 = (ap_sig_allocacmp_j_load + 7'd1);

assign add_ln25_fu_299_p2 = (select_ln24_reg_417 + 6'd1);

assign add_ln26_1_fu_254_p2 = (add_ln20 + zext_ln26_2_fu_251_p1);

assign add_ln26_2_fu_282_p2 = (tmp_2_fu_264_p3 + zext_ln26_4_fu_278_p1);

assign add_ln26_3_fu_288_p2 = (add_ln26_2_fu_282_p2 + zext_ln26_fu_243_p1);

assign add_ln26_fu_246_p2 = (add_ln20 + zext_ln26_fu_243_p1);

assign addr_cmp_fu_324_p2 = ((reuse_addr_reg_fu_74 == zext_ln26_1_fu_317_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_379_p_ce = 1'b1;

assign grp_fu_379_p_din0 = sext_ln26_1_fu_313_p1;

assign grp_fu_379_p_din1 = sext_ln26_fu_309_p1;

assign icmp_ln24_fu_187_p2 = ((ap_sig_allocacmp_indvar_flatten_load == mul_ln24) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_211_p2 = ((ap_sig_allocacmp_k_load == j_3) ? 1'b1 : 1'b0);

assign reuse_select_fu_338_p3 = ((addr_cmp_reg_476[0:0] == 1'b1) ? reuse_reg_fu_78 : A_q1);

assign select_ln24_1_fu_225_p3 = ((icmp_ln25_fu_211_p2[0:0] == 1'b1) ? add_ln24_fu_205_p2 : ap_sig_allocacmp_j_load);

assign select_ln24_fu_217_p3 = ((icmp_ln25_fu_211_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_k_load);

assign sext_ln26_1_fu_313_p1 = $signed(A_load_1_reg_450);

assign sext_ln26_fu_309_p1 = $signed(A_load_reg_445);

assign shl_ln_fu_345_p3 = {{reuse_select_fu_338_p3}, {16'd0}};

assign sub_ln26_fu_353_p2 = (shl_ln_fu_345_p3 - mul_ln26_reg_471);

assign tmp_2_fu_264_p3 = {{select_ln24_reg_417}, {5'd0}};

assign tmp_3_fu_271_p3 = {{select_ln24_reg_417}, {3'd0}};

assign zext_ln15_cast_fu_155_p1 = zext_ln15;

assign zext_ln26_1_fu_317_p1 = add_ln26_reg_430_pp0_iter1_reg;

assign zext_ln26_2_fu_251_p1 = select_ln24_reg_417;

assign zext_ln26_3_fu_259_p1 = add_ln26_1_fu_254_p2;

assign zext_ln26_4_fu_278_p1 = tmp_3_fu_271_p3;

assign zext_ln26_5_fu_294_p1 = add_ln26_3_fu_288_p2;

assign zext_ln26_fu_243_p1 = select_ln24_1_reg_425;

endmodule //kernel_lu_kernel_lu_Pipeline_VITIS_LOOP_24_4_VITIS_LOOP_25_5
