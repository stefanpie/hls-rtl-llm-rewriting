// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_nussinov_kernel_nussinov_Pipeline_VITIS_LOOP_33_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln27,
        zext_ln17,
        table_r_address0,
        table_r_ce0,
        table_r_we0,
        table_r_d0,
        table_r_q0,
        table_r_address1,
        table_r_ce1,
        table_r_q1,
        add_ln21,
        sub_ln21,
        zext_ln18
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] select_ln27;
input  [5:0] zext_ln17;
output  [11:0] table_r_address0;
output   table_r_ce0;
output   table_r_we0;
output  [31:0] table_r_d0;
input  [31:0] table_r_q0;
output  [11:0] table_r_address1;
output   table_r_ce1;
input  [31:0] table_r_q1;
input  [11:0] add_ln21;
input  [11:0] sub_ln21;
input  [6:0] zext_ln18;

reg ap_idle;
reg[11:0] table_r_address0;
reg table_r_ce0;
reg table_r_we0;
reg table_r_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln33_fu_177_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln18_cast1_fu_130_p1;
reg   [63:0] zext_ln18_cast1_reg_277;
wire   [63:0] add_ln21_cast_fu_134_p1;
reg   [63:0] add_ln21_cast_reg_282;
wire   [11:0] zext_ln18_cast_fu_142_p1;
reg   [11:0] zext_ln18_cast_reg_287;
reg   [31:0] p_load_reg_292;
wire    ap_block_pp0_stage1_11001;
reg   [11:0] table_r_addr_1_reg_298;
wire   [5:0] trunc_ln34_fu_188_p1;
reg   [5:0] trunc_ln34_reg_306;
wire   [9:0] trunc_ln34_1_fu_192_p1;
reg   [9:0] trunc_ln34_1_reg_311;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] add_ln34_1_fu_231_p2;
reg   [31:0] add_ln34_1_reg_321;
wire    ap_block_pp0_stage3_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln34_fu_172_p1;
wire   [63:0] zext_ln34_1_fu_226_p1;
wire    ap_block_pp0_stage2;
reg   [63:0] k_fu_60;
wire   [63:0] add_ln34_fu_182_p2;
wire   [63:0] zext_ln17_cast_fu_138_p1;
wire    ap_loop_init;
reg   [31:0] empty_fu_64;
wire   [31:0] select_ln34_fu_247_p3;
wire    ap_block_pp0_stage0;
wire   [11:0] trunc_ln21_fu_163_p1;
wire   [11:0] add_ln34_2_fu_167_p2;
wire   [11:0] p_shl4_fu_201_p3;
wire   [11:0] p_shl5_fu_208_p3;
wire   [11:0] sub_ln34_fu_215_p2;
wire   [11:0] add_ln34_3_fu_221_p2;
wire    ap_block_pp0_stage3;
wire   [0:0] icmp_ln34_fu_237_p2;
wire   [0:0] xor_ln34_fu_241_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_nussinov_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_64 <= select_ln27;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            empty_fu_64 <= select_ln34_fu_247_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        k_fu_60 <= zext_ln17_cast_fu_138_p1;
    end else if (((icmp_ln33_fu_177_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        k_fu_60 <= add_ln34_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln21_cast_reg_282[11 : 0] <= add_ln21_cast_fu_134_p1[11 : 0];
        zext_ln18_cast1_reg_277[6 : 0] <= zext_ln18_cast1_fu_130_p1[6 : 0];
        zext_ln18_cast_reg_287[6 : 0] <= zext_ln18_cast_fu_142_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln34_1_reg_321 <= add_ln34_1_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_load_reg_292 <= empty_fu_64;
        table_r_addr_1_reg_298 <= zext_ln34_fu_172_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_177_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln34_1_reg_311 <= trunc_ln34_1_fu_192_p1;
        trunc_ln34_reg_306 <= trunc_ln34_fu_188_p1;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_177_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            table_r_address0 = zext_ln34_1_fu_226_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            table_r_address0 = add_ln21_cast_reg_282;
        end else begin
            table_r_address0 = 'bx;
        end
    end else begin
        table_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        table_r_ce0 = 1'b1;
    end else begin
        table_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        table_r_ce1 = 1'b1;
    end else begin
        table_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        table_r_we0 = 1'b1;
    end else begin
        table_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_cast_fu_134_p1 = add_ln21;

assign add_ln34_1_fu_231_p2 = (table_r_q0 + table_r_q1);

assign add_ln34_2_fu_167_p2 = (sub_ln21 + trunc_ln21_fu_163_p1);

assign add_ln34_3_fu_221_p2 = (sub_ln34_fu_215_p2 + zext_ln18_cast_reg_287);

assign add_ln34_fu_182_p2 = (k_fu_60 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln33_fu_177_p2 = (($signed(k_fu_60) < $signed(zext_ln18_cast1_reg_277)) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_237_p2 = (($signed(p_load_reg_292) < $signed(add_ln34_1_reg_321)) ? 1'b1 : 1'b0);

assign p_shl4_fu_201_p3 = {{trunc_ln34_reg_306}, {6'd0}};

assign p_shl5_fu_208_p3 = {{trunc_ln34_1_reg_311}, {2'd0}};

assign select_ln34_fu_247_p3 = ((xor_ln34_fu_241_p2[0:0] == 1'b1) ? p_load_reg_292 : add_ln34_1_reg_321);

assign sub_ln34_fu_215_p2 = (p_shl4_fu_201_p3 - p_shl5_fu_208_p3);

assign table_r_address1 = table_r_addr_1_reg_298;

assign table_r_d0 = empty_fu_64;

assign trunc_ln21_fu_163_p1 = k_fu_60[11:0];

assign trunc_ln34_1_fu_192_p1 = add_ln34_fu_182_p2[9:0];

assign trunc_ln34_fu_188_p1 = add_ln34_fu_182_p2[5:0];

assign xor_ln34_fu_241_p2 = (icmp_ln34_fu_237_p2 ^ 1'd1);

assign zext_ln17_cast_fu_138_p1 = zext_ln17;

assign zext_ln18_cast1_fu_130_p1 = zext_ln18;

assign zext_ln18_cast_fu_142_p1 = zext_ln18;

assign zext_ln34_1_fu_226_p1 = add_ln34_3_fu_221_p2;

assign zext_ln34_fu_172_p1 = add_ln34_2_fu_167_p2;

always @ (posedge ap_clk) begin
    zext_ln18_cast1_reg_277[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    add_ln21_cast_reg_282[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln18_cast_reg_287[11:7] <= 5'b00000;
end

endmodule //kernel_nussinov_kernel_nussinov_Pipeline_VITIS_LOOP_33_3
