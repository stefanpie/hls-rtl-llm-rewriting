// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_fdtd_2d_kernel_fdtd_2d_Pipeline_VITIS_LOOP_35_7_VITIS_LOOP_36_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ex_address0,
        ex_ce0,
        ex_q0,
        ex_address1,
        ex_ce1,
        ex_q1,
        ey_address0,
        ey_ce0,
        ey_q0,
        ey_address1,
        ey_ce1,
        ey_q1,
        hz_address0,
        hz_ce0,
        hz_we0,
        hz_d0,
        hz_address1,
        hz_ce1,
        hz_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] ex_address0;
output   ex_ce0;
input  [31:0] ex_q0;
output  [9:0] ex_address1;
output   ex_ce1;
input  [31:0] ex_q1;
output  [9:0] ey_address0;
output   ey_ce0;
input  [31:0] ey_q0;
output  [9:0] ey_address1;
output   ey_ce1;
input  [31:0] ey_q1;
output  [9:0] hz_address0;
output   hz_ce0;
output   hz_we0;
output  [31:0] hz_d0;
output  [9:0] hz_address1;
output   hz_ce1;
input  [31:0] hz_q1;

reg ap_idle;
reg ex_ce0;
reg ex_ce1;
reg ey_ce0;
reg ey_ce1;
reg hz_ce0;
reg hz_we0;
reg hz_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln35_fu_167_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln35_fu_191_p3;
reg   [4:0] select_ln35_reg_424;
wire   [4:0] select_ln35_1_fu_205_p3;
reg   [4:0] select_ln35_1_reg_429;
wire   [4:0] select_ln35_2_fu_219_p3;
reg   [4:0] select_ln35_2_reg_435;
wire   [4:0] add_ln37_fu_227_p2;
reg   [4:0] add_ln37_reg_441;
reg   [9:0] hz_addr_reg_461;
reg   [9:0] hz_addr_reg_461_pp0_iter2_reg;
reg   [9:0] hz_addr_reg_461_pp0_iter3_reg;
reg   [9:0] hz_addr_reg_461_pp0_iter4_reg;
reg   [9:0] hz_addr_reg_461_pp0_iter5_reg;
wire   [32:0] sub_ln37_fu_345_p2;
reg   [32:0] sub_ln37_reg_472;
reg   [31:0] ey_load_reg_477;
reg   [31:0] ey_load_1_reg_482;
wire   [33:0] sub_ln38_fu_366_p2;
reg  signed [33:0] sub_ln38_reg_487;
reg   [31:0] hz_load_reg_497;
wire   [47:0] grp_fu_144_p2;
reg   [47:0] mul_ln37_reg_502;
wire   [63:0] zext_ln37_3_fu_305_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln37_4_fu_318_p1;
wire   [63:0] zext_ln37_6_fu_332_p1;
reg   [4:0] j_fu_66;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_70;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [9:0] indvar_flatten13_fu_74;
wire   [9:0] add_ln35_fu_173_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten13_load;
wire  signed [16:0] grp_fu_144_p1;
wire   [0:0] icmp_ln36_fu_185_p2;
wire   [4:0] indvars_iv_next3216_fu_199_p2;
wire   [4:0] indvars_iv_next32_mid1_fu_213_p2;
wire   [5:0] tmp_7_fu_255_p3;
wire   [9:0] tmp_6_fu_248_p3;
wire   [9:0] zext_ln37_fu_262_p1;
wire   [5:0] tmp_9_fu_279_p3;
wire   [9:0] tmp_8_fu_272_p3;
wire   [9:0] zext_ln37_1_fu_286_p1;
wire   [9:0] sub_ln37_1_fu_266_p2;
wire   [9:0] zext_ln37_2_fu_296_p1;
wire   [9:0] add_ln37_3_fu_299_p2;
wire   [9:0] sub_ln37_2_fu_290_p2;
wire   [9:0] add_ln37_4_fu_312_p2;
wire   [9:0] zext_ln37_5_fu_323_p1;
wire   [9:0] add_ln37_5_fu_326_p2;
wire  signed [32:0] sext_ln37_fu_337_p1;
wire  signed [32:0] sext_ln37_1_fu_341_p1;
wire  signed [33:0] sext_ln37_2_fu_351_p1;
wire  signed [33:0] sext_ln37_3_fu_354_p1;
wire   [33:0] add_ln37_1_fu_357_p2;
wire  signed [33:0] sext_ln38_fu_363_p1;
wire   [47:0] shl_ln2_fu_376_p3;
wire   [47:0] add_ln37_2_fu_383_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_fdtd_2d_mul_34s_17s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 48 ))
mul_34s_17s_48_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln38_reg_487),
    .din1(grp_fu_144_p1),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

kernel_fdtd_2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln35_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= select_ln35_1_fu_205_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln35_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_74 <= add_ln35_fu_173_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_74 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln35_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_66 <= add_ln37_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_167_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln37_reg_441 <= add_ln37_fu_227_p2;
        select_ln35_1_reg_429 <= select_ln35_1_fu_205_p3;
        select_ln35_2_reg_435 <= select_ln35_2_fu_219_p3;
        select_ln35_reg_424 <= select_ln35_fu_191_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        hz_addr_reg_461 <= zext_ln37_3_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        hz_addr_reg_461_pp0_iter2_reg <= hz_addr_reg_461;
        hz_addr_reg_461_pp0_iter3_reg <= hz_addr_reg_461_pp0_iter2_reg;
        hz_addr_reg_461_pp0_iter4_reg <= hz_addr_reg_461_pp0_iter3_reg;
        hz_addr_reg_461_pp0_iter5_reg <= hz_addr_reg_461_pp0_iter4_reg;
        mul_ln37_reg_502 <= grp_fu_144_p2;
        sub_ln37_reg_472 <= sub_ln37_fu_345_p2;
        sub_ln38_reg_487 <= sub_ln38_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ey_load_1_reg_482 <= ey_q0;
        ey_load_reg_477 <= ey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        hz_load_reg_497 <= hz_q1;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_167_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ex_ce0 = 1'b1;
    end else begin
        ex_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ex_ce1 = 1'b1;
    end else begin
        ex_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ey_ce0 = 1'b1;
    end else begin
        ey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ey_ce1 = 1'b1;
    end else begin
        ey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        hz_ce0 = 1'b1;
    end else begin
        hz_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        hz_ce1 = 1'b1;
    end else begin
        hz_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        hz_we0 = 1'b1;
    end else begin
        hz_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_173_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 10'd1);

assign add_ln37_1_fu_357_p2 = ($signed(sext_ln37_2_fu_351_p1) + $signed(sext_ln37_3_fu_354_p1));

assign add_ln37_2_fu_383_p2 = (shl_ln2_fu_376_p3 + mul_ln37_reg_502);

assign add_ln37_3_fu_299_p2 = (sub_ln37_1_fu_266_p2 + zext_ln37_2_fu_296_p1);

assign add_ln37_4_fu_312_p2 = (sub_ln37_2_fu_290_p2 + zext_ln37_2_fu_296_p1);

assign add_ln37_5_fu_326_p2 = (sub_ln37_1_fu_266_p2 + zext_ln37_5_fu_323_p1);

assign add_ln37_fu_227_p2 = (select_ln35_fu_191_p3 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ex_address0 = zext_ln37_3_fu_305_p1;

assign ex_address1 = zext_ln37_6_fu_332_p1;

assign ey_address0 = zext_ln37_3_fu_305_p1;

assign ey_address1 = zext_ln37_4_fu_318_p1;

assign grp_fu_144_p1 = 48'd281474976664781;

assign hz_address0 = hz_addr_reg_461_pp0_iter5_reg;

assign hz_address1 = hz_addr_reg_461_pp0_iter3_reg;

assign hz_d0 = {{add_ln37_2_fu_383_p2[47:16]}};

assign icmp_ln35_fu_167_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 10'd551) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_185_p2 = ((ap_sig_allocacmp_j_load == 5'd29) ? 1'b1 : 1'b0);

assign indvars_iv_next3216_fu_199_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign indvars_iv_next32_mid1_fu_213_p2 = (ap_sig_allocacmp_i_load + 5'd2);

assign select_ln35_1_fu_205_p3 = ((icmp_ln36_fu_185_p2[0:0] == 1'b1) ? indvars_iv_next3216_fu_199_p2 : ap_sig_allocacmp_i_load);

assign select_ln35_2_fu_219_p3 = ((icmp_ln36_fu_185_p2[0:0] == 1'b1) ? indvars_iv_next32_mid1_fu_213_p2 : indvars_iv_next3216_fu_199_p2);

assign select_ln35_fu_191_p3 = ((icmp_ln36_fu_185_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign sext_ln37_1_fu_341_p1 = $signed(ex_q0);

assign sext_ln37_2_fu_351_p1 = $signed(sub_ln37_reg_472);

assign sext_ln37_3_fu_354_p1 = $signed(ey_load_reg_477);

assign sext_ln37_fu_337_p1 = $signed(ex_q1);

assign sext_ln38_fu_363_p1 = $signed(ey_load_1_reg_482);

assign shl_ln2_fu_376_p3 = {{hz_load_reg_497}, {16'd0}};

assign sub_ln37_1_fu_266_p2 = (tmp_6_fu_248_p3 - zext_ln37_fu_262_p1);

assign sub_ln37_2_fu_290_p2 = (tmp_8_fu_272_p3 - zext_ln37_1_fu_286_p1);

assign sub_ln37_fu_345_p2 = ($signed(sext_ln37_fu_337_p1) - $signed(sext_ln37_1_fu_341_p1));

assign sub_ln38_fu_366_p2 = ($signed(add_ln37_1_fu_357_p2) - $signed(sext_ln38_fu_363_p1));

assign tmp_6_fu_248_p3 = {{select_ln35_1_reg_429}, {5'd0}};

assign tmp_7_fu_255_p3 = {{select_ln35_1_reg_429}, {1'd0}};

assign tmp_8_fu_272_p3 = {{select_ln35_2_reg_435}, {5'd0}};

assign tmp_9_fu_279_p3 = {{select_ln35_2_reg_435}, {1'd0}};

assign zext_ln37_1_fu_286_p1 = tmp_9_fu_279_p3;

assign zext_ln37_2_fu_296_p1 = select_ln35_reg_424;

assign zext_ln37_3_fu_305_p1 = add_ln37_3_fu_299_p2;

assign zext_ln37_4_fu_318_p1 = add_ln37_4_fu_312_p2;

assign zext_ln37_5_fu_323_p1 = add_ln37_reg_441;

assign zext_ln37_6_fu_332_p1 = add_ln37_5_fu_326_p2;

assign zext_ln37_fu_262_p1 = tmp_7_fu_255_p3;

endmodule //kernel_fdtd_2d_kernel_fdtd_2d_Pipeline_VITIS_LOOP_35_7_VITIS_LOOP_36_8
