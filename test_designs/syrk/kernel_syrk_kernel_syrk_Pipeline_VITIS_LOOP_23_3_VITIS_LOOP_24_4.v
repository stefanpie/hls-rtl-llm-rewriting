// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_syrk_kernel_syrk_Pipeline_VITIS_LOOP_23_3_VITIS_LOOP_24_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln23_1,
        indvars_iv137,
        empty,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        conv_i70,
        sub_ln22,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] add_ln23_1;
input  [4:0] indvars_iv137;
input  [9:0] empty;
output  [9:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [9:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
input  [31:0] conv_i70;
input  [9:0] sub_ln22;
output  [9:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;

reg ap_idle;
reg A_ce0;
reg A_ce1;
reg[9:0] C_address0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln23_reg_443;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] conv_i70_cast_fu_174_p1;
reg  signed [63:0] conv_i70_cast_reg_438;
wire   [0:0] icmp_ln23_fu_206_p2;
reg   [4:0] j_load_reg_447;
reg   [4:0] k_load_reg_452;
wire   [4:0] add_ln23_fu_224_p2;
reg   [4:0] add_ln23_reg_457;
wire   [0:0] icmp_ln24_fu_230_p2;
reg   [0:0] icmp_ln24_reg_462;
wire   [4:0] select_ln23_fu_241_p3;
reg   [4:0] select_ln23_reg_468;
wire    ap_block_pp0_stage1_11001;
reg   [4:0] select_ln23_reg_468_pp0_iter1_reg;
reg   [4:0] select_ln23_reg_468_pp0_iter2_reg;
reg   [4:0] select_ln23_reg_468_pp0_iter3_reg;
wire   [9:0] zext_ln23_fu_252_p1;
reg   [9:0] zext_ln23_reg_475;
reg  signed [31:0] A_load_reg_485;
wire  signed [63:0] grp_fu_166_p2;
reg  signed [63:0] mul_ln23_reg_500;
reg  signed [31:0] A_load_1_reg_505;
reg   [9:0] C_addr_reg_515;
reg   [9:0] C_addr_reg_515_pp0_iter5_reg;
wire   [0:0] addr_cmp_fu_344_p2;
reg   [0:0] addr_cmp_reg_520;
reg   [0:0] addr_cmp_reg_520_pp0_iter5_reg;
reg   [31:0] C_load_reg_525;
wire   [63:0] grp_fu_170_p2;
reg   [63:0] mul_ln25_reg_530;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] add_ln23_2_cast_fu_261_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln25_4_fu_319_p1;
wire   [63:0] zext_ln25_1_fu_336_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] reuse_addr_reg_fu_78;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_82;
reg   [4:0] j_fu_86;
wire   [4:0] add_ln24_fu_266_p2;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] k_fu_90;
wire   [4:0] select_ln23_1_fu_247_p3;
reg   [4:0] ap_sig_allocacmp_k_load;
reg   [9:0] indvar_flatten_fu_94;
wire   [9:0] add_ln23_3_fu_212_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire  signed [31:0] grp_fu_166_p1;
wire   [9:0] add_ln23_2_fu_256_p2;
wire   [8:0] tmp_6_fu_286_p3;
wire   [6:0] tmp_7_fu_297_p3;
wire   [9:0] zext_ln25_2_fu_293_p1;
wire   [9:0] zext_ln25_3_fu_304_p1;
wire   [9:0] add_ln25_2_fu_308_p2;
wire   [9:0] add_ln25_3_fu_314_p2;
wire   [9:0] zext_ln25_fu_328_p1;
wire   [9:0] add_ln25_1_fu_331_p2;
wire   [31:0] reuse_select_fu_358_p3;
wire   [63:0] shl_ln_fu_364_p3;
wire   [63:0] add_ln25_fu_372_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_syrk_mul_32s_32s_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32s_32s_64_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_485),
    .din1(grp_fu_166_p1),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

kernel_syrk_mul_64s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_64s_32s_64_5_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln23_reg_500),
    .din1(A_load_1_reg_505),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

kernel_syrk_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln23_fu_206_p2 == 1'd0))) begin
            indvar_flatten_fu_94 <= add_ln23_3_fu_212_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_94 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_86 <= 5'd0;
    end else if (((icmp_ln23_reg_443 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_86 <= add_ln24_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_fu_90 <= 5'd0;
    end else if (((icmp_ln23_reg_443 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        k_fu_90 <= select_ln23_1_fu_247_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_78 <= 64'd18446744073709551615;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            reuse_addr_reg_fu_78 <= zext_ln25_1_fu_336_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reuse_reg_fu_82 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_reg_fu_82 <= {{add_ln25_fu_372_p2[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_load_1_reg_505 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_load_reg_485 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_addr_reg_515 <= zext_ln25_1_fu_336_p1;
        C_addr_reg_515_pp0_iter5_reg <= C_addr_reg_515;
        addr_cmp_reg_520 <= addr_cmp_fu_344_p2;
        addr_cmp_reg_520_pp0_iter5_reg <= addr_cmp_reg_520;
        conv_i70_cast_reg_438 <= conv_i70_cast_fu_174_p1;
        icmp_ln23_reg_443 <= icmp_ln23_fu_206_p2;
        mul_ln23_reg_500 <= grp_fu_166_p2;
        mul_ln25_reg_530 <= grp_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        C_load_reg_525 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln23_fu_206_p2 == 1'd0))) begin
        add_ln23_reg_457 <= add_ln23_fu_224_p2;
        icmp_ln24_reg_462 <= icmp_ln24_fu_230_p2;
        j_load_reg_447 <= ap_sig_allocacmp_j_load;
        k_load_reg_452 <= ap_sig_allocacmp_k_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        select_ln23_reg_468_pp0_iter1_reg <= select_ln23_reg_468;
        select_ln23_reg_468_pp0_iter2_reg <= select_ln23_reg_468_pp0_iter1_reg;
        select_ln23_reg_468_pp0_iter3_reg <= select_ln23_reg_468_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_443 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln23_reg_468 <= select_ln23_fu_241_p3;
        zext_ln23_reg_475[4 : 0] <= zext_ln23_fu_252_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        C_address0 = C_addr_reg_515_pp0_iter5_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_address0 = zext_ln25_1_fu_336_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_443 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 5'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_90;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln25_4_fu_319_p1;

assign A_address1 = add_ln23_2_cast_fu_261_p1;

assign C_d0 = {{add_ln25_fu_372_p2[63:32]}};

assign add_ln23_2_cast_fu_261_p1 = add_ln23_2_fu_256_p2;

assign add_ln23_2_fu_256_p2 = (empty + zext_ln23_fu_252_p1);

assign add_ln23_3_fu_212_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln23_fu_224_p2 = (ap_sig_allocacmp_k_load + 5'd1);

assign add_ln24_fu_266_p2 = (select_ln23_fu_241_p3 + 5'd1);

assign add_ln25_1_fu_331_p2 = (sub_ln22 + zext_ln25_fu_328_p1);

assign add_ln25_2_fu_308_p2 = (zext_ln25_2_fu_293_p1 + zext_ln25_3_fu_304_p1);

assign add_ln25_3_fu_314_p2 = (add_ln25_2_fu_308_p2 + zext_ln23_reg_475);

assign add_ln25_fu_372_p2 = (shl_ln_fu_364_p3 + mul_ln25_reg_530);

assign addr_cmp_fu_344_p2 = ((reuse_addr_reg_fu_78 == zext_ln25_1_fu_336_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign conv_i70_cast_fu_174_p1 = $signed(conv_i70);

assign grp_fu_166_p1 = conv_i70_cast_reg_438;

assign icmp_ln23_fu_206_p2 = ((ap_sig_allocacmp_indvar_flatten_load == add_ln23_1) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_230_p2 = ((ap_sig_allocacmp_j_load == indvars_iv137) ? 1'b1 : 1'b0);

assign reuse_select_fu_358_p3 = ((addr_cmp_reg_520_pp0_iter5_reg[0:0] == 1'b1) ? reuse_reg_fu_82 : C_load_reg_525);

assign select_ln23_1_fu_247_p3 = ((icmp_ln24_reg_462[0:0] == 1'b1) ? add_ln23_reg_457 : k_load_reg_452);

assign select_ln23_fu_241_p3 = ((icmp_ln24_reg_462[0:0] == 1'b1) ? 5'd0 : j_load_reg_447);

assign shl_ln_fu_364_p3 = {{reuse_select_fu_358_p3}, {32'd0}};

assign tmp_6_fu_286_p3 = {{select_ln23_reg_468}, {4'd0}};

assign tmp_7_fu_297_p3 = {{select_ln23_reg_468}, {2'd0}};

assign zext_ln23_fu_252_p1 = select_ln23_1_fu_247_p3;

assign zext_ln25_1_fu_336_p1 = add_ln25_1_fu_331_p2;

assign zext_ln25_2_fu_293_p1 = tmp_6_fu_286_p3;

assign zext_ln25_3_fu_304_p1 = tmp_7_fu_297_p3;

assign zext_ln25_4_fu_319_p1 = add_ln25_3_fu_314_p2;

assign zext_ln25_fu_328_p1 = select_ln23_reg_468_pp0_iter3_reg;

always @ (posedge ap_clk) begin
    zext_ln23_reg_475[9:5] <= 5'b00000;
end

endmodule //kernel_syrk_kernel_syrk_Pipeline_VITIS_LOOP_23_3_VITIS_LOOP_24_4
