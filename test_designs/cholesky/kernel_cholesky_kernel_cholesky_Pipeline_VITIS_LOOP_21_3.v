// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_cholesky_kernel_cholesky_Pipeline_VITIS_LOOP_21_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        add_ln22,
        j,
        add_ln28,
        add_ln22_1
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [10:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
input  [10:0] add_ln22;
input  [5:0] j;
input  [10:0] add_ln28;
input  [10:0] add_ln22_1;

reg ap_idle;
reg[10:0] A_address0;
reg A_ce0;
reg A_we0;
reg[10:0] A_address1;
reg A_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln21_reg_341;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln22_cast_fu_130_p1;
reg   [63:0] add_ln22_cast_reg_328;
reg   [10:0] A_addr_reg_335;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [10:0] A_addr_reg_335_pp0_iter1_reg;
wire   [0:0] icmp_ln21_fu_152_p2;
wire   [0:0] addr_cmp_fu_190_p2;
reg   [0:0] addr_cmp_reg_355;
wire   [0:0] addr_cmp11_fu_199_p2;
reg   [0:0] addr_cmp11_reg_360;
wire   [0:0] addr_cmp15_fu_208_p2;
reg   [0:0] addr_cmp15_reg_365;
reg   [0:0] addr_cmp15_reg_365_pp0_iter1_reg;
wire   [31:0] reuse_select_fu_225_p3;
reg  signed [31:0] reuse_select_reg_370;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] reuse_select12_fu_235_p3;
reg  signed [31:0] reuse_select12_reg_375;
reg   [31:0] A_load_3_reg_390;
wire   [47:0] grp_fu_126_p2;
reg   [47:0] mul_ln22_reg_395;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln22_1_fu_172_p1;
wire   [63:0] zext_ln22_2_fu_182_p1;
reg   [63:0] reuse_addr_reg_fu_58;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_62;
reg   [31:0] ap_sig_allocacmp_reuse_reg_load;
wire    ap_block_pp0_stage2;
reg   [31:0] ap_sig_allocacmp_reuse_reg_load_1;
reg   [5:0] k_1_fu_66;
wire   [5:0] add_ln21_fu_157_p2;
wire    ap_block_pp0_stage0;
wire   [10:0] zext_ln22_fu_163_p1;
wire   [10:0] add_ln22_2_fu_167_p2;
wire   [10:0] add_ln22_3_fu_177_p2;
wire   [31:0] reuse_select16_fu_253_p3;
wire   [47:0] shl_ln2_fu_259_p3;
wire   [47:0] sub_ln22_fu_267_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_cholesky_mul_32s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reuse_select12_reg_375),
    .din1(reuse_select_reg_370),
    .ce(1'b1),
    .dout(grp_fu_126_p2)
);

kernel_cholesky_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        k_1_fu_66 <= 6'd0;
    end else if (((icmp_ln21_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        k_1_fu_66 <= add_ln21_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_addr_reg_fu_58 <= 64'd18446744073709551615;
    end else if (((icmp_ln21_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_addr_reg_fu_58 <= add_ln22_cast_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_reg_fu_62 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reuse_reg_fu_62 <= {{sub_ln22_fu_267_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_addr_reg_335 <= add_ln22_cast_reg_328;
        A_addr_reg_335_pp0_iter1_reg <= A_addr_reg_335;
        addr_cmp15_reg_365_pp0_iter1_reg <= addr_cmp15_reg_365;
        icmp_ln21_reg_341 <= icmp_ln21_fu_152_p2;
        mul_ln22_reg_395 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_341 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == addr_cmp15_reg_365))) begin
        A_load_3_reg_390 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln22_cast_reg_328[10 : 0] <= add_ln22_cast_fu_130_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        addr_cmp11_reg_360 <= addr_cmp11_fu_199_p2;
        addr_cmp15_reg_365 <= addr_cmp15_fu_208_p2;
        addr_cmp_reg_355 <= addr_cmp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_341 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reuse_select12_reg_375 <= reuse_select12_fu_235_p3;
        reuse_select_reg_370 <= reuse_select_fu_225_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_address0 = A_addr_reg_335_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_address0 = zext_ln22_2_fu_182_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            A_address1 = A_addr_reg_335;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            A_address1 = zext_ln22_1_fu_172_p1;
        end else begin
            A_address1 = 'bx;
        end
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_341 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_reuse_reg_load = {{sub_ln22_fu_267_p2[47:16]}};
    end else begin
        ap_sig_allocacmp_reuse_reg_load = reuse_reg_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_reuse_reg_load_1 = {{sub_ln22_fu_267_p2[47:16]}};
    end else begin
        ap_sig_allocacmp_reuse_reg_load_1 = reuse_reg_fu_62;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = {{sub_ln22_fu_267_p2[47:16]}};

assign add_ln21_fu_157_p2 = (k_1_fu_66 + 6'd1);

assign add_ln22_2_fu_167_p2 = (add_ln28 + zext_ln22_fu_163_p1);

assign add_ln22_3_fu_177_p2 = (add_ln22_1 + zext_ln22_fu_163_p1);

assign add_ln22_cast_fu_130_p1 = add_ln22;

assign addr_cmp11_fu_199_p2 = ((reuse_addr_reg_fu_58 == zext_ln22_2_fu_182_p1) ? 1'b1 : 1'b0);

assign addr_cmp15_fu_208_p2 = ((reuse_addr_reg_fu_58 == add_ln22_cast_reg_328) ? 1'b1 : 1'b0);

assign addr_cmp_fu_190_p2 = ((reuse_addr_reg_fu_58 == zext_ln22_1_fu_172_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign icmp_ln21_fu_152_p2 = ((k_1_fu_66 == j) ? 1'b1 : 1'b0);

assign reuse_select12_fu_235_p3 = ((addr_cmp11_reg_360[0:0] == 1'b1) ? ap_sig_allocacmp_reuse_reg_load_1 : A_q0);

assign reuse_select16_fu_253_p3 = ((addr_cmp15_reg_365_pp0_iter1_reg[0:0] == 1'b1) ? reuse_reg_fu_62 : A_load_3_reg_390);

assign reuse_select_fu_225_p3 = ((addr_cmp_reg_355[0:0] == 1'b1) ? ap_sig_allocacmp_reuse_reg_load : A_q1);

assign shl_ln2_fu_259_p3 = {{reuse_select16_fu_253_p3}, {16'd0}};

assign sub_ln22_fu_267_p2 = (shl_ln2_fu_259_p3 - mul_ln22_reg_395);

assign zext_ln22_1_fu_172_p1 = add_ln22_2_fu_167_p2;

assign zext_ln22_2_fu_182_p1 = add_ln22_3_fu_177_p2;

assign zext_ln22_fu_163_p1 = k_1_fu_66;

always @ (posedge ap_clk) begin
    add_ln22_cast_reg_328[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //kernel_cholesky_kernel_cholesky_Pipeline_VITIS_LOOP_21_3
