// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_trmm_kernel_trmm_Pipeline_VITIS_LOOP_21_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln19,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        add_ln22_1,
        zext_ln19_1,
        A_address0,
        A_ce0,
        A_q0,
        zext_ln20,
        grp_fu_113_p_din0,
        grp_fu_113_p_din1,
        grp_fu_113_p_dout0,
        grp_fu_113_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] zext_ln19;
output  [9:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
input  [31:0] B_q0;
output  [9:0] B_address1;
output   B_ce1;
input  [31:0] B_q1;
input  [9:0] add_ln22_1;
input  [4:0] zext_ln19_1;
output  [8:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
input  [4:0] zext_ln20;
output  [31:0] grp_fu_113_p_din0;
output  [31:0] grp_fu_113_p_din1;
input  [47:0] grp_fu_113_p_dout0;
output   grp_fu_113_p_ce;

reg ap_idle;
reg[9:0] B_address0;
reg B_ce0;
reg B_we0;
reg B_ce1;
reg A_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln21_reg_417;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln22_1_cast_fu_154_p1;
reg   [63:0] add_ln22_1_cast_reg_380;
wire   [9:0] zext_ln20_cast_fu_162_p1;
reg   [9:0] zext_ln20_cast_reg_387;
wire   [8:0] zext_ln19_1_cast_fu_166_p1;
reg   [8:0] zext_ln19_1_cast_reg_392;
reg   [63:0] k_1_reg_397;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [9:0] B_addr_reg_402;
reg   [9:0] B_addr_reg_402_pp0_iter1_reg;
wire   [0:0] icmp_ln21_fu_264_p2;
wire   [0:0] addr_cmp_fu_273_p2;
reg   [0:0] addr_cmp_reg_421;
wire   [0:0] addr_cmp17_fu_282_p2;
reg   [0:0] addr_cmp17_reg_426;
reg   [0:0] addr_cmp17_reg_426_pp0_iter1_reg;
reg   [31:0] A_load_reg_431;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] reuse_select_fu_294_p3;
reg   [31:0] reuse_select_reg_436;
reg   [31:0] B_load_1_reg_441;
wire  signed [47:0] sext_ln22_fu_301_p1;
wire  signed [47:0] sext_ln22_1_fu_305_p1;
reg   [47:0] mul_ln22_reg_456;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln22_fu_223_p1;
wire   [63:0] zext_ln22_1_fu_259_p1;
reg   [63:0] reuse_addr_reg_fu_76;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_80;
reg   [31:0] ap_sig_allocacmp_reuse_reg_load;
wire    ap_block_pp0_stage2;
reg   [63:0] k_fu_84;
wire   [63:0] add_ln21_fu_309_p2;
wire   [63:0] zext_ln19_cast_fu_158_p1;
wire    ap_block_pp0_stage0;
wire   [4:0] trunc_ln22_fu_188_p1;
wire   [6:0] trunc_ln22_1_fu_200_p1;
wire   [8:0] p_shl4_fu_192_p3;
wire   [8:0] p_shl5_fu_204_p3;
wire   [8:0] add_ln22_2_fu_212_p2;
wire   [8:0] add_ln22_3_fu_218_p2;
wire   [8:0] trunc_ln22_2_fu_236_p1;
wire   [9:0] p_shl2_fu_228_p3;
wire   [9:0] p_shl3_fu_240_p3;
wire   [9:0] sub_ln22_fu_248_p2;
wire   [9:0] add_ln22_4_fu_254_p2;
wire   [31:0] reuse_select18_fu_322_p3;
wire   [47:0] shl_ln_fu_328_p3;
wire   [47:0] add_ln22_fu_336_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_trmm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_84 <= zext_ln19_cast_fu_158_p1;
        end else if (((icmp_ln21_reg_417 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_84 <= add_ln21_fu_309_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_addr_reg_fu_76 <= 64'd18446744073709551615;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln21_fu_264_p2 == 1'd1))) begin
        reuse_addr_reg_fu_76 <= add_ln22_1_cast_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_reg_fu_80 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reuse_reg_fu_80 <= {{add_ln22_fu_336_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_417 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_load_reg_431 <= A_q0;
        reuse_select_reg_436 <= reuse_select_fu_294_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_addr_reg_402 <= add_ln22_1_cast_reg_380;
        B_addr_reg_402_pp0_iter1_reg <= B_addr_reg_402;
        addr_cmp17_reg_426_pp0_iter1_reg <= addr_cmp17_reg_426;
        icmp_ln21_reg_417 <= icmp_ln21_fu_264_p2;
        k_1_reg_397 <= k_fu_84;
        mul_ln22_reg_456 <= grp_fu_113_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_417 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        B_load_1_reg_441 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln22_1_cast_reg_380[9 : 0] <= add_ln22_1_cast_fu_154_p1[9 : 0];
        zext_ln19_1_cast_reg_392[4 : 0] <= zext_ln19_1_cast_fu_166_p1[4 : 0];
        zext_ln20_cast_reg_387[4 : 0] <= zext_ln20_cast_fu_162_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln21_fu_264_p2 == 1'd1))) begin
        addr_cmp17_reg_426 <= addr_cmp17_fu_282_p2;
        addr_cmp_reg_421 <= addr_cmp_fu_273_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        B_address0 = B_addr_reg_402_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_address0 = add_ln22_1_cast_reg_380;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_417 == 1'd0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_reuse_reg_load = {{add_ln22_fu_336_p2[47:16]}};
    end else begin
        ap_sig_allocacmp_reuse_reg_load = reuse_reg_fu_80;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln22_fu_223_p1;

assign B_address1 = zext_ln22_1_fu_259_p1;

assign B_d0 = {{add_ln22_fu_336_p2[47:16]}};

assign add_ln21_fu_309_p2 = (k_1_reg_397 + 64'd1);

assign add_ln22_1_cast_fu_154_p1 = add_ln22_1;

assign add_ln22_2_fu_212_p2 = (p_shl4_fu_192_p3 + p_shl5_fu_204_p3);

assign add_ln22_3_fu_218_p2 = (add_ln22_2_fu_212_p2 + zext_ln19_1_cast_reg_392);

assign add_ln22_4_fu_254_p2 = (sub_ln22_fu_248_p2 + zext_ln20_cast_reg_387);

assign add_ln22_fu_336_p2 = (shl_ln_fu_328_p3 + mul_ln22_reg_456);

assign addr_cmp17_fu_282_p2 = ((reuse_addr_reg_fu_76 == add_ln22_1_cast_reg_380) ? 1'b1 : 1'b0);

assign addr_cmp_fu_273_p2 = ((reuse_addr_reg_fu_76 == zext_ln22_1_fu_259_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign grp_fu_113_p_ce = 1'b1;

assign grp_fu_113_p_din0 = sext_ln22_1_fu_305_p1;

assign grp_fu_113_p_din1 = sext_ln22_fu_301_p1;

assign icmp_ln21_fu_264_p2 = (($signed(k_fu_84) < $signed(64'd20)) ? 1'b1 : 1'b0);

assign p_shl2_fu_228_p3 = {{trunc_ln22_fu_188_p1}, {5'd0}};

assign p_shl3_fu_240_p3 = {{trunc_ln22_2_fu_236_p1}, {1'd0}};

assign p_shl4_fu_192_p3 = {{trunc_ln22_fu_188_p1}, {4'd0}};

assign p_shl5_fu_204_p3 = {{trunc_ln22_1_fu_200_p1}, {2'd0}};

assign reuse_select18_fu_322_p3 = ((addr_cmp17_reg_426_pp0_iter1_reg[0:0] == 1'b1) ? reuse_reg_fu_80 : B_load_1_reg_441);

assign reuse_select_fu_294_p3 = ((addr_cmp_reg_421[0:0] == 1'b1) ? ap_sig_allocacmp_reuse_reg_load : B_q1);

assign sext_ln22_1_fu_305_p1 = $signed(reuse_select_reg_436);

assign sext_ln22_fu_301_p1 = $signed(A_load_reg_431);

assign shl_ln_fu_328_p3 = {{reuse_select18_fu_322_p3}, {16'd0}};

assign sub_ln22_fu_248_p2 = (p_shl2_fu_228_p3 - p_shl3_fu_240_p3);

assign trunc_ln22_1_fu_200_p1 = k_fu_84[6:0];

assign trunc_ln22_2_fu_236_p1 = k_fu_84[8:0];

assign trunc_ln22_fu_188_p1 = k_fu_84[4:0];

assign zext_ln19_1_cast_fu_166_p1 = zext_ln19_1;

assign zext_ln19_cast_fu_158_p1 = zext_ln19;

assign zext_ln20_cast_fu_162_p1 = zext_ln20;

assign zext_ln22_1_fu_259_p1 = add_ln22_4_fu_254_p2;

assign zext_ln22_fu_223_p1 = add_ln22_3_fu_218_p2;

always @ (posedge ap_clk) begin
    add_ln22_1_cast_reg_380[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln20_cast_reg_387[9:5] <= 5'b00000;
    zext_ln19_1_cast_reg_392[8:5] <= 4'b0000;
end

endmodule //kernel_trmm_kernel_trmm_Pipeline_VITIS_LOOP_21_3
